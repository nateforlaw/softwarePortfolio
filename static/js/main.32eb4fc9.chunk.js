(this.webpackJsonpportfolio=this.webpackJsonpportfolio||[]).push([[0],[,,,,,,,function(e,n,t){e.exports=t.p+"static/media/scratch_circles.87014c83.png"},function(e,n,t){e.exports=t.p+"static/media/java_desktop.cb2b5980.png"},function(e,n,t){e.exports=t(16)},,,,,function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),s=t(6),o=t.n(s),i=(t(14),t(1)),l=t(2),c=t(4),d=t(3),g=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){var e=this;return r.a.createElement("div",{id:"header"},r.a.createElement("i",{id:"signature"},"Nathan R. Lawrence"),r.a.createElement("button",{className:0===this.props.page?"expand":"",onClick:function(){return e.props.headerHandler(0)}},r.a.createElement("span",null,"Home ")),r.a.createElement("button",{className:1===this.props.page?"expand":"",onClick:function(){return e.props.headerHandler(1)}},r.a.createElement("span",null,"Java ")),r.a.createElement("button",{className:2===this.props.page?"expand":"",onClick:function(){return e.props.headerHandler(2)}},r.a.createElement("span",null,"JS ")),r.a.createElement("button",{className:3===this.props.page?"expand":"",onClick:function(){return e.props.headerHandler(3)}},r.a.createElement("span",null,"PHP ")),r.a.createElement("button",{className:4===this.props.page?"expand":"",onClick:function(){return e.props.headerHandler(4)}},r.a.createElement("span",null,"SQL ")))}}]),t}(r.a.Component),u=t(7),p=t.n(u),b=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"page"},r.a.createElement("h1",null,"I am a developer."),r.a.createElement("p",null,"Starting in middle school, I picked any class that had anything to do with software. By freshman year in high school, I was already prepared to conquer any projects that involved computer accelerated development."),r.a.createElement("p",null,"Like many developers, some of my first endeavors into programming was heavily comprised of ",r.a.createElement("a",{href:"https://scratch.mit.edu/studios/8793695/",rel:"noopener noreferrer",target:"_blank"},"Scratch"),"."),r.a.createElement("img",{src:p.a,alt:""}),r.a.createElement("p",null,"Naturally, I couldn't simply stop there. I was proud of my work and was interested to see what I could do with a bit more freedom. As it turns out, it is a lot harder than I had initially thought, but I accepted the challenge and I am still learning new things to this day."),r.a.createElement("p",null,"Feel free to use the navigator at the top of the page to see of my other projects and demonstrations."))}}]),t}(r.a.Component),h=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){switch(this.props.type){default:return r.a.createElement("div",null,"Error, code did not load.");case"java":return r.a.createElement("pre",null,'\n    import javafx.application.Application;\n    import javafx.stage.Stage;\n    import javafx.scene.Scene;\n    import javafx.scene.layout.FlowPane;\n    import javafx.scene.control.Button;\n    import javafx.scene.image.Image;\n    import javafx.scene.image.ImageView;\n    import javafx.geometry.Pos;\n    import javafx.scene.Group;\n    import javafx.application.Platform;\n    import javafx.scene.control.Label;\n    import javafx.scene.layout.VBox;\n    import javafx.scene.layout.HBox;\n    import java.util.ArrayList;\n    import javafx.scene.input.MouseEvent;\n    import javafx.geometry.Pos;\n\n    //swing is seperate. used for error window\n    import javax.swing.JOptionPane;\n\n    public class Kiosk extends Application\n    {\n        //main stage\n        Seat[][] seats;\n        Label priceFinal;\n        double finalPrice = 0;\n        Stage mainStage;\n        \n        //error box\n        ErrorBox err;\n        \n        //varibles for window placement.\n        double originX;\n        double originY;\n        \n        //screen operation\n        Label price;\n        double currentOrder = 0;\n        boolean screenOpen = false;\n        \n        //order printing\n        ArrayList<Seat[][]> orders = new ArrayList<Seat[][]>();\n        ArrayList<Stage> stages = new ArrayList<Stage>();\n        boolean ordersOpen = false;\n        Stage stageX;\n        \n        public Kiosk()\n        {\n            //make seats, initilize them to respective prices\n            seats = new Seat[10][8];\n            for(int a = 0; a < seats.length; a++)\n            {\n                for(int b = 0; b < seats[0].length; b++)\n                {\n                    if(a<=4)\n                        seats[a][b] = new Seat(14.99);\n                    else if(a>4 && a<=7)\n                        seats[a][b] = new Seat(10.49);\n                    else\n                        seats[a][b] = new Seat(6.99);\n                }\n            }\n        }\n        \n        public void start(Stage stage)\n        {\n            mainStage = stage;\n            \n            //exits whole program when this stage is closed\n            mainStage.setOnCloseRequest((ae) -> {\n                Platform.exit();\n                System.exit(0);\n            });\n            \n            //bunch of layout elemsnts\n            FlowPane root = new FlowPane();\n            Scene scene = new Scene(root);\n            root.setAlignment(Pos.CENTER);\n            \n            VBox box = new VBox();\n            \n            priceFinal = new Label("$ 0.00");\n            \n            //couple buttons\n            Button btn = new Button("New Order");\n            btn.setOnAction(eve-> screenOperation());\n            \n            Button btn2 = new Button("View Orders");\n            btn2.setOnAction(eve-> printOrders());\n            \n            //add them to the vbox\n            box.getChildren().add(priceFinal);\n            box.getChildren().add(btn);\n            box.getChildren().add(btn2);\n            \n            root.getChildren().add(box);\n            \n            //setup of mainstage for display\n            mainStage.setTitle("Kiosk");\n            mainStage.setWidth(300);\n            mainStage.setHeight(200);\n            mainStage.setScene(scene); \n            mainStage.show();\n            \n            //sets variables for middle of screen(stage opens in middle by default)\n            originX = mainStage.getX();\n            originY = mainStage.getY();\n        }\n        \n        public void run()\n        {\n            Application.launch();\n        }\n        \n        public void screenOperation()\n        {\n            if(!screenOpen)\n            {\n                screenOpen = true;\n                \n                //for a nice looking layout\n                VBox rows = new VBox();\n                VBox mastervbox = new VBox();\n                \n                currentOrder = 0;\n                Stage stage = new Stage();\n                \n                /* on close request in charge of multiple things:\n                    * - adding order to list of orders for later or concurrent use\n                    * - opening an instance of the order if orders are being displayed\n                    * - adds order price to final price\n                    * - locks seats so they cant be re-selected   */\n                stage.setOnCloseRequest((ae) -> {\n                    if(currentOrder != 0)\n                    {\n                        orders.add(getCurrentSeats());\n                        lockSeats();\n                        finalPrice += currentOrder;\n                        String x = "$ " + Double.toString(Math.round(finalPrice*100.0)/100.0);\n                        if(x.substring(x.indexOf(\'.\')).length() == 2)\n                            x += "0";\n                        priceFinal.setText(x);\n                        if(ordersOpen)\n                            updateOrders();\n                    }\n                    screenOpen = false;\n                });\n                \n                Image seatOpen = new Image("seatOpen.png");\n                Image seatTaken = new Image("seatTaken.png");\n                \n                price = new Label("$ 0.00");\n                \n                //initilize bigScreen image\n                ImageView bigScreen = new ImageView(new Image("bigScreen.png"));\n                bigScreen.setFitWidth(600);\n                bigScreen.setFitHeight(100);\n                bigScreen.setSmooth(true);\n            \n                Group root = new Group();\n                Scene scene = new Scene(root);\n                \n                for(int a = 0; a < seats.length; a++)\n                {\n                    HBox box = new HBox();\n                    for(int b = 0; b < seats[0].length; b++)\n                    { \n                        /* resizes the image to have width of 100 /\n                        /  while preserving the ratio and using   /\n                        /  higher quality filtering method;       /\n                        /  each ImageView is also cached to       /\n                        /  improve performance                   */\n                        if(seats[a][b].getOpen())\n                            seats[a][b].setImage(seatOpen);\n                        else\n                            seats[a][b].setImage(seatTaken);\n                        seats[a][b].setFitWidth(75);\n                        seats[a][b].setPreserveRatio(true);\n                        seats[a][b].setSmooth(true);\n                        seats[a][b].setCache(true);\n                        seats[a][b].setOnMouseClicked((MouseEvent e) -> {\n                            seatClicked((Seat)e.getSource());\n                        });\n                        \n                        //set up layout and window\n                        box.getChildren().add(seats[a][b]);\n                    }\n                    //add hbox to vbox\n                    rows.getChildren().add(box);\n                }\n                \n                //add screen to the rest\n                mastervbox.getChildren().add(price);\n                mastervbox.getChildren().add(bigScreen);\n                mastervbox.getChildren().add(rows);\n                \n                //add vbox to root\n                root.getChildren().add(mastervbox);\n                \n                //average stage setup\n                stage.setTitle("Screen");\n                stage.setScene(scene); \n                stage.sizeToScene(); \n                stage.setResizable(false);\n                stage.show();\n            }\n            else\n            {\n                if(err != null)\n                    err.stage.close();\n                err = new ErrorBox("Screen already open!");\n            }\n        }\n        \n        //handles seat being clicked\n        public void seatClicked(Seat seat)\n        {\n            Image seatOpen = new Image("seatOpen.png");\n            Image seatSelected = new Image("seatSelected.png");\n            \n            //switches between clicked and unclicked\n            if(!seat.getLocked())\n            {\n                if(seat.getOpen())\n                {\n                    seat.setImage(seatSelected);\n                    seat.setOpen(false);\n                    currentOrder+=seat.getPrice();\n                }\n                else\n                {\n                    seat.setImage(seatOpen);\n                    seat.setOpen(true);\n                    currentOrder-=seat.getPrice();\n                }\n                //set price every time regaurdless\n                String x = "$ " + Double.toString(Math.round(currentOrder*100.0)/100.0);\n                if(x.substring(x.indexOf(\'.\')).length() == 2)\n                        x += "0";\n                price.setText(x);\n            }\n        }\n        \n        //locks all seats that have been slected by user.\n        public void lockSeats()\n        {\n            for(int a = 0; a < seats.length; a++)\n            {\n                for(int b = 0; b < seats[0].length; b++)\n                {\n                    if(!seats[a][b].getOpen())\n                        seats[a][b].lock();\n                }\n            }\n        }\n        \n        public void printOrders()\n        {\n            //checking for error cases\n            if(orders.size() > 0)\n                if(!ordersOpen)\n                {\n                    ordersOpen = true;\n                    \n                    //instuctional window\n                    stageX = new Stage();\n                    stageX.setOnCloseRequest((ae) -> {\n                            Runnable r = new SinMove(mainStage,originX,originY);\n                            new Thread(r).start();\n                            closeStages();\n                            ordersOpen = false;\n                        });\n                    \n                    FlowPane rootX = new FlowPane();\n                    rootX.setAlignment(Pos.CENTER);\n                    Scene sceneX = new Scene(rootX, 250, 75);\n                    \n                    rootX.getChildren().add(new Label("To remove an order close it,\n or exit this prompt to quit.\nYou can still make additional orders."));\n                    stageX.setScene(sceneX);\n                    stageX.show();\n                    \n                    //moves stages to positions\n                    Runnable r = new SinMove(stageX,stageX.getX(),stageX.getY()-200);\n                    new Thread(r).start();\n                    \n                    r = new SinMove(mainStage,originX,originY+300);\n                    new Thread(r).start();\n                    \n                    //opens each stage using orders array\n                    for(int i = 0; i < orders.size(); i++)\n                    {\n                        double currentPrice = 0;\n                        \n                        Stage stage = new Stage();\n                        \n                        stage.setOnCloseRequest((ae) -> {\n                            Platform.runLater(new Runnable() {\n                                @Override public void run() {\n                                    closeStages();\n                                }\n                            });\n                        });\n                        \n                        VBox rows = new VBox();\n                        VBox mastervbox = new VBox();\n                        HBox notscreen = new HBox();\n                        \n                        Image seatOpen = new Image("seatOpen.png");\n                        Image seatTaken = new Image("seatTaken.png");\n                        \n                        ImageView bigScreen = new ImageView(new Image("bigScreen.png"));\n                        bigScreen.setFitWidth(200);\n                        bigScreen.setFitHeight(33);\n                        bigScreen.setSmooth(true);\n                        \n                        Group root = new Group();\n                        Scene scene = new Scene(root);\n                        \n                        //initilize instance of orders onto each stage\n                        for(int a = 0; a < orders.get(i).length; a++)\n                        {\n                            HBox box = new HBox();\n                            for(int b = 0; b < orders.get(i)[0].length; b++)\n                            { \n                                //copy paste modify\n                                if(orders.get(i)[a][b].getOpen())\n                                    orders.get(i)[a][b].setImage(seatOpen);\n                                else\n                                {\n                                    orders.get(i)[a][b].setImage(seatTaken);\n                                    currentPrice += orders.get(i)[a][b].getPrice();\n                                }\n                                orders.get(i)[a][b].setFitWidth(25);\n                                orders.get(i)[a][b].setPreserveRatio(true);\n                                orders.get(i)[a][b].setSmooth(true);\n                                orders.get(i)[a][b].setCache(true);\n                                \n                                //set up layout and window\n                                box.getChildren().add(orders.get(i)[a][b]);\n                            }\n                            //add hbox to vbox\n                            rows.getChildren().add(box);\n                        }\n                        \n                        String x = "$ " + Double.toString(Math.round(currentPrice*100.0)/100.0);\n                        if(x.substring(x.indexOf(\'.\')).length() == 2)\n                                x += "0";\n                        Label price = new Label(x);\n                        \n                        //add screen to the rest\n                        mastervbox.getChildren().add(price);\n                        mastervbox.getChildren().add(bigScreen);\n                        mastervbox.getChildren().add(rows);\n                        \n                        //add vbox to root\n                        root.getChildren().add(mastervbox);\n                        \n                        stage.setTitle("No. " + Integer.toString(i+1));\n                        stage.setScene(scene); \n                        stage.sizeToScene();\n                        stage.setResizable(false);\n                        stages.add(stage);\n                        stages.get(i).show();\n                    }\n                    //sorts the stages for user to view\n                    r = new Sort(stages);\n                    new Thread(r).start();\n                }\n                else\n                {\n                    //error for orders already open\n                    if(err != null)\n                        err.stage.close();\n                    err = new ErrorBox("Orders already open!");\n                }\n            else\n            {\n                //error for ordes non existeint\n                if(err != null)\n                        err.stage.close();\n                err = new ErrorBox("There arent any orders!");\n            }\n        }\n        \n        public void updateOrders()\n        {\n            //copy code from printOrders() to last element of orders array\n            double currentPrice = 0;\n                    \n            Stage stage = new Stage();\n            \n            stage.setOnCloseRequest((ae) -> {\n                Platform.runLater(new Runnable() {\n                    @Override public void run() {\n                        closeStages();\n                    }\n                });\n            });\n            \n            VBox rows = new VBox();\n            VBox mastervbox = new VBox();\n            HBox notscreen = new HBox();\n            \n            Image seatOpen = new Image("seatOpen.png");\n            Image seatTaken = new Image("seatTaken.png");\n            \n            ImageView bigScreen = new ImageView(new Image("bigScreen.png"));\n            bigScreen.setFitWidth(200);\n            bigScreen.setFitHeight(33);\n            bigScreen.setSmooth(true);\n            \n            Group root = new Group();\n            Scene scene = new Scene(root);\n            \n            for(int a = 0; a < orders.get(orders.size()-1).length; a++)\n            {\n                HBox box = new HBox();\n                for(int b = 0; b < orders.get(orders.size()-1)[0].length; b++)\n                { \n                    //copy paste modify\n                    if(orders.get(orders.size()-1)[a][b].getOpen())\n                        orders.get(orders.size()-1)[a][b].setImage(seatOpen);\n                    else\n                    {\n                        orders.get(orders.size()-1)[a][b].setImage(seatTaken);\n                        currentPrice += orders.get(orders.size()-1)[a][b].getPrice();\n                    }\n                    orders.get(orders.size()-1)[a][b].setFitWidth(25);\n                    orders.get(orders.size()-1)[a][b].setPreserveRatio(true);\n                    orders.get(orders.size()-1)[a][b].setSmooth(true);\n                    orders.get(orders.size()-1)[a][b].setCache(true);\n                    \n                    //set up layout and window\n                    box.getChildren().add(orders.get(orders.size()-1)[a][b]);\n                }\n                //add hbox to vbox\n                rows.getChildren().add(box);\n            }\n            \n            String x = "$ " + Double.toString(Math.round(currentPrice*100.0)/100.0);\n            if(x.substring(x.indexOf(\'.\')).length() == 2)\n                    x += "0";\n            Label price = new Label(x);\n            \n            //add screen to the rest\n            mastervbox.getChildren().add(price);\n            mastervbox.getChildren().add(bigScreen);\n            mastervbox.getChildren().add(rows);\n            \n            //add vbox to root\n            root.getChildren().add(mastervbox);\n            \n            //your average stage setup\n            stage.setTitle("No. " + Integer.toString(orders.size()));\n            stage.setScene(scene); \n            stage.sizeToScene(); \n            stages.add(stage);\n            stages.get(orders.size()-1).show();\n            \n            //redisplays the orders in a nice way\n            Runnable r = new Sort(stages);\n            new Thread(r).start();\n        }\n        \n        public Seat[][] getCurrentSeats()\n        {\n            //new array and initilize it\n            Seat[][] out = new Seat[10][8];\n            for(int a = 0; a < out.length; a++)\n            {\n                for(int b = 0; b < out[0].length; b++)\n                {\n                    if(a<=4)\n                        out[a][b] = new Seat(14.99);\n                    else if(a>4 && a<=7)\n                        out[a][b] = new Seat(10.49);\n                    else\n                        out[a][b] = new Seat(6.99);\n                }\n            }\n            \n            //checks for non-locked but taken seats\n            //then locks correspoding seats on the new array\n            for(int a = 0; a < out.length; a++)\n                for(int b = 0; b < out[0].length; b++)\n                    if(!seats[a][b].getLocked() && !seats[a][b].getOpen())\n                        out[a][b].lock();\n            return out;\n        }\n        \n        public void closeStages()\n        {\n            //finds the stage that has closed\n            int index = -1;\n            for(int i = 0; i < stages.size(); i++)\n            {\n                if(!stages.get(i).isShowing())\n                    index = i;\n            }\n            \n            //if index is available, subtract that total and close other stages\n            if(index != -1)\n            {\n                //remove proce\n                finalPrice -= getPrice(orders.get(index));\n                String x = "$ " + Double.toString(Math.round(finalPrice*100.0)/100.0);\n                if(x.substring(x.indexOf(\'.\')).length() == 2)\n                    x += "0";\n                priceFinal.setText(x);\n                \n                //clears the seats from the main array\n                for(int a = 0; a < seats.length; a++)\n                {\n                    for(int b = 0; b < seats[0].length; b++)\n                    {\n                        if(!orders.get(index)[a][b].getOpen() && !seats[a][b].getOpen())\n                            seats[a][b] = new Seat(seats[a][b].getPrice());\n                    }\n                }\n                \n                //removes it from the list\n                orders.remove(index);\n                stages.remove(index);\n                \n                //resorts the stages\n                Runnable r = new Sort(stages);\n                new Thread(r).start();\n                \n                //close everything if the last order was closed\n                if(stages.size() == 0)\n                {\n                    stageX.close();\n                    ordersOpen = false;\n                    r = new SinMove(mainStage,originX,originY);\n                    new Thread(r).start();\n                }\n            }\n            //if none have closed(-1) close all other stages\n            else\n            {\n                for(int i = 0; i < stages.size(); i++)\n                {\n                    stages.get(i).close();\n                }\n                stages.clear();\n                stageX.close();\n                //no ordersOpen = false; because its onCloseRequest for stageX\n            }\n        }\n        \n        //returns price of array of seats\n        public double getPrice(Seat[][] seats)\n        {\n            double rtrn = 0;\n            for(int a = 0; a < seats.length; a++)\n            {\n                for(int b = 0; b < seats[0].length; b++)\n                {\n                    if(!seats[a][b].getOpen())\n                        rtrn += seats[a][b].getPrice();\n                }\n            }\n            return rtrn;\n        }\n        \n        public class Sort implements Runnable \n        {\n            ArrayList<Stage> stages;\n            double[] coordEdit;\n            double length = 100;\n            \n            public Sort(ArrayList<Stage> stages) \n            {\n                this.stages = stages;\n            }\n        \n            public void run() \n            {\n                coordEdit = new double[2];\n                //sets length of the windows baised on how many there are\n                length += (stages.size()*(10.0/(stages.size()/2.0)));\n                for(int i = 0; i < stages.size(); i++)\n                {\n                    //sets each stage position, to evenly spread them out\n                    coordEdit[0] = originX + (((length*stages.size())/stages.size())*(i+1)) - (length/2)*stages.size() - 20;\n                    coordEdit[1] = originY;\n                    \n                    //activiate\n                    Runnable r = new SinMove(stages.get(i),coordEdit[0],coordEdit[1]);\n                    new Thread(r).start();\n                }\n            }\n        }\n        \n        public class SinMove implements Runnable\n        {\n            Stage stage;\n            public double dx; //destination x\n            public double dy; //destination y\n            double cx; //current x\n            double cy; //current y\n            double x; //temp value\n            double y; //temp value\n            \n            public SinMove(Stage stage, double dx, double dy)\n            {\n                this.stage = stage;\n                this.dx = dx;\n                this.dy = dy;\n                cx = stage.getX();\n                cy = stage.getY();\n            }\n            \n            public void run()\n            {\n                do\n                {\n                    //value window will move by each tick\n                    x = (x*.4)+((dx-cx)*.1);\n                    y = (y*.4)+((dy-cy)*.1);\n                    \n                    //moves window\n                    stage.setX(stage.getX()+x);\n                    stage.setY(stage.getY()+y);\n                    \n                    //gets new position\n                    cx = stage.getX();\n                    cy = stage.getY();\n                    \n                    //tick 1000/20 times per second\n                    try{Thread.sleep(20);}catch(Exception e){}\n                }while((x>.1 || x<-.1) || (y>.1 || y<-.1));\n            }\n        }\n    }\n            ');case"js":case"php":case"sql":return r.a.createElement("pre",null,"")}}}]),t}(r.a.Component),m=t(8),f=t.n(m),w=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"page"},r.a.createElement("p",null,"When developing in Java, I most commonly use BlueJ. It was introduced to me during my sophmore year of highschool, and it's my go-to for developing anything in Java. I love it because it is lightweight, portable, and super easy to use."),r.a.createElement("p",null,"My favorite project was a somewhat failed attempt at over-engineering a custom built music player. The end result met the project requirements, but I later edited it to see what would happen if I played every single sound in a couple of my favorite games, all at once."),r.a.createElement("i",{style:{margin:"10px"}},"(Volume Warning: It's quite loud and truly terrifying.)"),r.a.createElement("br",null),r.a.createElement("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/b2_xi8xjNyY",title:"TerrariaPlaylistVideo",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullscreen:!0}),r.a.createElement("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/6dPNpdMZPKY",title:"MinecraftPlaylistvideo",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullscreen:!0}),r.a.createElement("p",null,"My largest project to date, however, is a movie theater project in whitch was meant to show my competence in the use of arrays and lists. However, I decided a console interface was quite boring, and dove into JavaFX and multi-threading. The best part was that using a custom user interface meant I didn't have to worry about validating user inputs."),r.a.createElement("i",{style:{margin:"10px"}},"Here is the result diplayed on my current desktop (an infrared photo of the center of the universe from NASA's spitzer space telescope)."),r.a.createElement("br",null),r.a.createElement("img",{src:f.a,alt:"",width:"80%"}),r.a.createElement("p",null,"Without further adue, the code:"),r.a.createElement(h,{type:"java"}))}}]),t}(r.a.Component),x=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"page"},"js")}}]),t}(r.a.Component),v=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"page"},"php")}}]),t}(r.a.Component),S=function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(){return Object(i.a)(this,t),n.apply(this,arguments)}return Object(l.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"page"},"sql")}}]),t}(r.a.Component),y=(t(15),function(e){Object(c.a)(t,e);var n=Object(d.a)(t);function t(e){var a;return Object(i.a)(this,t),(a=n.call(this,e)).headerHandler=function(e){a.setState({pageLoaded:e})},a.state={pageLoaded:0},a}return Object(l.a)(t,[{key:"renderPage",value:function(){switch(this.state.pageLoaded){default:case 0:return r.a.createElement(b,null);case 1:return r.a.createElement(w,null);case 2:return r.a.createElement(x,null);case 3:return r.a.createElement(v,null);case 4:return r.a.createElement(S,null)}}},{key:"render",value:function(){return r.a.createElement("div",null,r.a.createElement(g,{page:this.state.pageLoaded,headerHandler:this.headerHandler}),this.renderPage())}}]),t}(r.a.Component));o.a.render(r.a.createElement(y,null),document.getElementById("root"))}],[[9,1,2]]]);
//# sourceMappingURL=main.32eb4fc9.chunk.js.map