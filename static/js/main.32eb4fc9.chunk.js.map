{"version":3,"sources":["bin/scratch_circles.png","bin/java_desktop.png","components/header.jsx","components/home.jsx","components/code_snippets.jsx","components/java.jsx","components/javascript.jsx","components/php.jsx","components/sql.jsx","App.js","index.js"],"names":["module","exports","Header","id","className","this","props","page","onClick","headerHandler","React","Component","Home","href","rel","target","src","scratch_circles","alt","Snippet","type","Java","style","margin","width","height","title","frameBorder","allow","allowFullscreen","java_desktop","Javascript","PHP","SQL","App","value","setState","pageLoaded","state","renderPage","ReactDOM","render","document","getElementById"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,qLCe5BC,E,uKAZF,IAAD,OACJ,OAAO,yBAAKC,GAAG,UACX,uBAAGA,GAAG,aAAN,sBACA,4BAAQC,UAA8B,IAAlBC,KAAKC,MAAMC,KAAU,SAAS,GAAIC,QAAS,kBAAM,EAAKF,MAAMG,cAAc,KAAI,wCAClG,4BAAQL,UAA8B,IAAlBC,KAAKC,MAAMC,KAAU,SAAS,GAAIC,QAAS,kBAAM,EAAKF,MAAMG,cAAc,KAAI,wCAClG,4BAAQL,UAA8B,IAAlBC,KAAKC,MAAMC,KAAU,SAAS,GAAIC,QAAS,kBAAM,EAAKF,MAAMG,cAAc,KAAI,sCAClG,4BAAQL,UAA8B,IAAlBC,KAAKC,MAAMC,KAAU,SAAS,GAAIC,QAAS,kBAAM,EAAKF,MAAMG,cAAc,KAAI,uCAClG,4BAAQL,UAA8B,IAAlBC,KAAKC,MAAMC,KAAU,SAAS,GAAIC,QAAS,kBAAM,EAAKF,MAAMG,cAAc,KAAI,4C,GARzFC,IAAMC,W,gBCuBZC,E,uKApBP,OAAO,yBAAKR,UAAU,QAClB,iDACA,mPAGA,yHAC+F,uBAAGS,KAAK,2CAA2CC,IAAI,sBAAsBC,OAAO,UAApF,WAD/F,KAGA,yBAAKC,IAAKC,IAAiBC,IAAI,KAC/B,gTAIA,yI,GAfOR,IAAMC,WCuoBVQ,E,uKAtoBP,OAAQd,KAAKC,MAAMc,MACf,QAAS,OAAQ,0DACjB,IAAK,OAAQ,OAAQ,sywBA6nBrB,IAAK,KACL,IAAK,MACL,IAAK,MAAO,OAAQ,sC,GAnoBVV,IAAMC,W,gBCkCbU,E,uKA9BP,OAAO,yBAAKjB,UAAU,QAClB,0QAKA,2SAKA,uBAAGkB,MAAO,CAACC,OAAQ,SAAnB,2DAAuF,6BACvF,4BAAQC,MAAM,MAAMC,OAAO,MAAMT,IAAI,4CAA4CU,MAAM,wBAAwBC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,IAC9N,4BAAQL,MAAM,MAAMC,OAAO,MAAMT,IAAI,4CAA4CU,MAAM,yBAAyBC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,IAC/N,2XAKA,uBAAGP,MAAO,CAACC,OAAQ,SAAnB,4IAAwK,6BACxK,yBAAKP,IAAKc,IAAcZ,IAAI,GAAGM,MAAM,QACrC,8DAGA,kBAAC,EAAD,CAASJ,KAAK,c,GA1BPV,IAAMC,WCMVoB,E,uKANP,OAAO,yBAAK3B,UAAU,QAAf,U,GAFUM,IAAMC,WCQhBqB,E,uKANP,OAAO,yBAAK5B,UAAU,QAAf,W,GAFGM,IAAMC,WCQTsB,E,uKANP,OAAO,yBAAK7B,UAAU,QAAf,W,GAFGM,IAAMC,WCsCTuB,G,wDA9Bb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IAMRG,cAAgB,SAAC0B,GACf,EAAKC,SAAS,CAACC,WAAYF,KAN3B,EAAKG,MAAQ,CACXD,WAAY,GAHG,E,yDAYjB,OAAQhC,KAAKiC,MAAMD,YACjB,QACA,KAAK,EAAG,OAAO,kBAAC,EAAD,MACf,KAAK,EAAG,OAAO,kBAAC,EAAD,MACf,KAAK,EAAG,OAAO,kBAAC,EAAD,MACf,KAAK,EAAG,OAAO,kBAAC,EAAD,MACf,KAAK,EAAG,OAAO,kBAAC,EAAD,S,+BAKjB,OAAO,6BACL,kBAAC,EAAD,CAAQ9B,KAAMF,KAAKiC,MAAMD,WAAY5B,cAAeJ,KAAKI,gBACxDJ,KAAKkC,kB,GA1BM7B,IAAMC,YCJxB6B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.32eb4fc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scratch_circles.87014c83.png\";","module.exports = __webpack_public_path__ + \"static/media/java_desktop.cb2b5980.png\";","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render(){\r\n        return <div id=\"header\">\r\n            <i id=\"signature\">Nathan R. Lawrence</i>\r\n            <button className={(this.props.page===0)?\"expand\":\"\"} onClick={() => this.props.headerHandler(0)}><span>Home </span></button>\r\n            <button className={(this.props.page===1)?\"expand\":\"\"} onClick={() => this.props.headerHandler(1)}><span>Java </span></button>\r\n            <button className={(this.props.page===2)?\"expand\":\"\"} onClick={() => this.props.headerHandler(2)}><span>JS </span></button>\r\n            <button className={(this.props.page===3)?\"expand\":\"\"} onClick={() => this.props.headerHandler(3)}><span>PHP </span></button>\r\n            <button className={(this.props.page===4)?\"expand\":\"\"} onClick={() => this.props.headerHandler(4)}><span>SQL </span></button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport scratch_circles from '../bin/scratch_circles.png';\r\n\r\nclass Home extends React.Component {\r\n    render(){\r\n        return <div className=\"page\">\r\n            <h1>I am a developer.</h1>\r\n            <p>\r\n                Starting in middle school, I picked any class that had anything to do with software. \r\n                By freshman year in high school, I was already prepared to conquer any projects that involved computer accelerated development.</p>\r\n            <p>\r\n                Like many developers, some of my first endeavors into programming was heavily comprised of <a href='https://scratch.mit.edu/studios/8793695/' rel=\"noopener noreferrer\" target=\"_blank\">Scratch</a>.\r\n            </p>\r\n            <img src={scratch_circles} alt=''></img>\r\n            <p>\r\n                Naturally, I couldn't simply stop there. I was proud of my work and was interested to see what I could do with a bit more freedom.\r\n                As it turns out, it is a lot harder than I had initially thought, but I accepted the challenge and I am still learning new things to this day.\r\n            </p>\r\n            <p>\r\n                Feel free to use the navigator at the top of the page to see of my other projects and demonstrations.\r\n            </p>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass Snippet extends React.Component {\r\n    render() {\r\n        switch (this.props.type) {\r\n            default: return (<div>Error, code did not load.</div>);\r\n            case 'java': return (<pre>{`\r\n    import javafx.application.Application;\r\n    import javafx.stage.Stage;\r\n    import javafx.scene.Scene;\r\n    import javafx.scene.layout.FlowPane;\r\n    import javafx.scene.control.Button;\r\n    import javafx.scene.image.Image;\r\n    import javafx.scene.image.ImageView;\r\n    import javafx.geometry.Pos;\r\n    import javafx.scene.Group;\r\n    import javafx.application.Platform;\r\n    import javafx.scene.control.Label;\r\n    import javafx.scene.layout.VBox;\r\n    import javafx.scene.layout.HBox;\r\n    import java.util.ArrayList;\r\n    import javafx.scene.input.MouseEvent;\r\n    import javafx.geometry.Pos;\r\n\r\n    //swing is seperate. used for error window\r\n    import javax.swing.JOptionPane;\r\n\r\n    public class Kiosk extends Application\r\n    {\r\n        //main stage\r\n        Seat[][] seats;\r\n        Label priceFinal;\r\n        double finalPrice = 0;\r\n        Stage mainStage;\r\n        \r\n        //error box\r\n        ErrorBox err;\r\n        \r\n        //varibles for window placement.\r\n        double originX;\r\n        double originY;\r\n        \r\n        //screen operation\r\n        Label price;\r\n        double currentOrder = 0;\r\n        boolean screenOpen = false;\r\n        \r\n        //order printing\r\n        ArrayList<Seat[][]> orders = new ArrayList<Seat[][]>();\r\n        ArrayList<Stage> stages = new ArrayList<Stage>();\r\n        boolean ordersOpen = false;\r\n        Stage stageX;\r\n        \r\n        public Kiosk()\r\n        {\r\n            //make seats, initilize them to respective prices\r\n            seats = new Seat[10][8];\r\n            for(int a = 0; a < seats.length; a++)\r\n            {\r\n                for(int b = 0; b < seats[0].length; b++)\r\n                {\r\n                    if(a<=4)\r\n                        seats[a][b] = new Seat(14.99);\r\n                    else if(a>4 && a<=7)\r\n                        seats[a][b] = new Seat(10.49);\r\n                    else\r\n                        seats[a][b] = new Seat(6.99);\r\n                }\r\n            }\r\n        }\r\n        \r\n        public void start(Stage stage)\r\n        {\r\n            mainStage = stage;\r\n            \r\n            //exits whole program when this stage is closed\r\n            mainStage.setOnCloseRequest((ae) -> {\r\n                Platform.exit();\r\n                System.exit(0);\r\n            });\r\n            \r\n            //bunch of layout elemsnts\r\n            FlowPane root = new FlowPane();\r\n            Scene scene = new Scene(root);\r\n            root.setAlignment(Pos.CENTER);\r\n            \r\n            VBox box = new VBox();\r\n            \r\n            priceFinal = new Label(\"$ 0.00\");\r\n            \r\n            //couple buttons\r\n            Button btn = new Button(\"New Order\");\r\n            btn.setOnAction(eve-> screenOperation());\r\n            \r\n            Button btn2 = new Button(\"View Orders\");\r\n            btn2.setOnAction(eve-> printOrders());\r\n            \r\n            //add them to the vbox\r\n            box.getChildren().add(priceFinal);\r\n            box.getChildren().add(btn);\r\n            box.getChildren().add(btn2);\r\n            \r\n            root.getChildren().add(box);\r\n            \r\n            //setup of mainstage for display\r\n            mainStage.setTitle(\"Kiosk\");\r\n            mainStage.setWidth(300);\r\n            mainStage.setHeight(200);\r\n            mainStage.setScene(scene); \r\n            mainStage.show();\r\n            \r\n            //sets variables for middle of screen(stage opens in middle by default)\r\n            originX = mainStage.getX();\r\n            originY = mainStage.getY();\r\n        }\r\n        \r\n        public void run()\r\n        {\r\n            Application.launch();\r\n        }\r\n        \r\n        public void screenOperation()\r\n        {\r\n            if(!screenOpen)\r\n            {\r\n                screenOpen = true;\r\n                \r\n                //for a nice looking layout\r\n                VBox rows = new VBox();\r\n                VBox mastervbox = new VBox();\r\n                \r\n                currentOrder = 0;\r\n                Stage stage = new Stage();\r\n                \r\n                /* on close request in charge of multiple things:\r\n                    * - adding order to list of orders for later or concurrent use\r\n                    * - opening an instance of the order if orders are being displayed\r\n                    * - adds order price to final price\r\n                    * - locks seats so they cant be re-selected   */\r\n                stage.setOnCloseRequest((ae) -> {\r\n                    if(currentOrder != 0)\r\n                    {\r\n                        orders.add(getCurrentSeats());\r\n                        lockSeats();\r\n                        finalPrice += currentOrder;\r\n                        String x = \"$ \" + Double.toString(Math.round(finalPrice*100.0)/100.0);\r\n                        if(x.substring(x.indexOf('.')).length() == 2)\r\n                            x += \"0\";\r\n                        priceFinal.setText(x);\r\n                        if(ordersOpen)\r\n                            updateOrders();\r\n                    }\r\n                    screenOpen = false;\r\n                });\r\n                \r\n                Image seatOpen = new Image(\"seatOpen.png\");\r\n                Image seatTaken = new Image(\"seatTaken.png\");\r\n                \r\n                price = new Label(\"$ 0.00\");\r\n                \r\n                //initilize bigScreen image\r\n                ImageView bigScreen = new ImageView(new Image(\"bigScreen.png\"));\r\n                bigScreen.setFitWidth(600);\r\n                bigScreen.setFitHeight(100);\r\n                bigScreen.setSmooth(true);\r\n            \r\n                Group root = new Group();\r\n                Scene scene = new Scene(root);\r\n                \r\n                for(int a = 0; a < seats.length; a++)\r\n                {\r\n                    HBox box = new HBox();\r\n                    for(int b = 0; b < seats[0].length; b++)\r\n                    { \r\n                        /* resizes the image to have width of 100 /\r\n                        /  while preserving the ratio and using   /\r\n                        /  higher quality filtering method;       /\r\n                        /  each ImageView is also cached to       /\r\n                        /  improve performance                   */\r\n                        if(seats[a][b].getOpen())\r\n                            seats[a][b].setImage(seatOpen);\r\n                        else\r\n                            seats[a][b].setImage(seatTaken);\r\n                        seats[a][b].setFitWidth(75);\r\n                        seats[a][b].setPreserveRatio(true);\r\n                        seats[a][b].setSmooth(true);\r\n                        seats[a][b].setCache(true);\r\n                        seats[a][b].setOnMouseClicked((MouseEvent e) -> {\r\n                            seatClicked((Seat)e.getSource());\r\n                        });\r\n                        \r\n                        //set up layout and window\r\n                        box.getChildren().add(seats[a][b]);\r\n                    }\r\n                    //add hbox to vbox\r\n                    rows.getChildren().add(box);\r\n                }\r\n                \r\n                //add screen to the rest\r\n                mastervbox.getChildren().add(price);\r\n                mastervbox.getChildren().add(bigScreen);\r\n                mastervbox.getChildren().add(rows);\r\n                \r\n                //add vbox to root\r\n                root.getChildren().add(mastervbox);\r\n                \r\n                //average stage setup\r\n                stage.setTitle(\"Screen\");\r\n                stage.setScene(scene); \r\n                stage.sizeToScene(); \r\n                stage.setResizable(false);\r\n                stage.show();\r\n            }\r\n            else\r\n            {\r\n                if(err != null)\r\n                    err.stage.close();\r\n                err = new ErrorBox(\"Screen already open!\");\r\n            }\r\n        }\r\n        \r\n        //handles seat being clicked\r\n        public void seatClicked(Seat seat)\r\n        {\r\n            Image seatOpen = new Image(\"seatOpen.png\");\r\n            Image seatSelected = new Image(\"seatSelected.png\");\r\n            \r\n            //switches between clicked and unclicked\r\n            if(!seat.getLocked())\r\n            {\r\n                if(seat.getOpen())\r\n                {\r\n                    seat.setImage(seatSelected);\r\n                    seat.setOpen(false);\r\n                    currentOrder+=seat.getPrice();\r\n                }\r\n                else\r\n                {\r\n                    seat.setImage(seatOpen);\r\n                    seat.setOpen(true);\r\n                    currentOrder-=seat.getPrice();\r\n                }\r\n                //set price every time regaurdless\r\n                String x = \"$ \" + Double.toString(Math.round(currentOrder*100.0)/100.0);\r\n                if(x.substring(x.indexOf('.')).length() == 2)\r\n                        x += \"0\";\r\n                price.setText(x);\r\n            }\r\n        }\r\n        \r\n        //locks all seats that have been slected by user.\r\n        public void lockSeats()\r\n        {\r\n            for(int a = 0; a < seats.length; a++)\r\n            {\r\n                for(int b = 0; b < seats[0].length; b++)\r\n                {\r\n                    if(!seats[a][b].getOpen())\r\n                        seats[a][b].lock();\r\n                }\r\n            }\r\n        }\r\n        \r\n        public void printOrders()\r\n        {\r\n            //checking for error cases\r\n            if(orders.size() > 0)\r\n                if(!ordersOpen)\r\n                {\r\n                    ordersOpen = true;\r\n                    \r\n                    //instuctional window\r\n                    stageX = new Stage();\r\n                    stageX.setOnCloseRequest((ae) -> {\r\n                            Runnable r = new SinMove(mainStage,originX,originY);\r\n                            new Thread(r).start();\r\n                            closeStages();\r\n                            ordersOpen = false;\r\n                        });\r\n                    \r\n                    FlowPane rootX = new FlowPane();\r\n                    rootX.setAlignment(Pos.CENTER);\r\n                    Scene sceneX = new Scene(rootX, 250, 75);\r\n                    \r\n                    rootX.getChildren().add(new Label(\"To remove an order close it,\\n or exit this prompt to quit.\\nYou can still make additional orders.\"));\r\n                    stageX.setScene(sceneX);\r\n                    stageX.show();\r\n                    \r\n                    //moves stages to positions\r\n                    Runnable r = new SinMove(stageX,stageX.getX(),stageX.getY()-200);\r\n                    new Thread(r).start();\r\n                    \r\n                    r = new SinMove(mainStage,originX,originY+300);\r\n                    new Thread(r).start();\r\n                    \r\n                    //opens each stage using orders array\r\n                    for(int i = 0; i < orders.size(); i++)\r\n                    {\r\n                        double currentPrice = 0;\r\n                        \r\n                        Stage stage = new Stage();\r\n                        \r\n                        stage.setOnCloseRequest((ae) -> {\r\n                            Platform.runLater(new Runnable() {\r\n                                @Override public void run() {\r\n                                    closeStages();\r\n                                }\r\n                            });\r\n                        });\r\n                        \r\n                        VBox rows = new VBox();\r\n                        VBox mastervbox = new VBox();\r\n                        HBox notscreen = new HBox();\r\n                        \r\n                        Image seatOpen = new Image(\"seatOpen.png\");\r\n                        Image seatTaken = new Image(\"seatTaken.png\");\r\n                        \r\n                        ImageView bigScreen = new ImageView(new Image(\"bigScreen.png\"));\r\n                        bigScreen.setFitWidth(200);\r\n                        bigScreen.setFitHeight(33);\r\n                        bigScreen.setSmooth(true);\r\n                        \r\n                        Group root = new Group();\r\n                        Scene scene = new Scene(root);\r\n                        \r\n                        //initilize instance of orders onto each stage\r\n                        for(int a = 0; a < orders.get(i).length; a++)\r\n                        {\r\n                            HBox box = new HBox();\r\n                            for(int b = 0; b < orders.get(i)[0].length; b++)\r\n                            { \r\n                                //copy paste modify\r\n                                if(orders.get(i)[a][b].getOpen())\r\n                                    orders.get(i)[a][b].setImage(seatOpen);\r\n                                else\r\n                                {\r\n                                    orders.get(i)[a][b].setImage(seatTaken);\r\n                                    currentPrice += orders.get(i)[a][b].getPrice();\r\n                                }\r\n                                orders.get(i)[a][b].setFitWidth(25);\r\n                                orders.get(i)[a][b].setPreserveRatio(true);\r\n                                orders.get(i)[a][b].setSmooth(true);\r\n                                orders.get(i)[a][b].setCache(true);\r\n                                \r\n                                //set up layout and window\r\n                                box.getChildren().add(orders.get(i)[a][b]);\r\n                            }\r\n                            //add hbox to vbox\r\n                            rows.getChildren().add(box);\r\n                        }\r\n                        \r\n                        String x = \"$ \" + Double.toString(Math.round(currentPrice*100.0)/100.0);\r\n                        if(x.substring(x.indexOf('.')).length() == 2)\r\n                                x += \"0\";\r\n                        Label price = new Label(x);\r\n                        \r\n                        //add screen to the rest\r\n                        mastervbox.getChildren().add(price);\r\n                        mastervbox.getChildren().add(bigScreen);\r\n                        mastervbox.getChildren().add(rows);\r\n                        \r\n                        //add vbox to root\r\n                        root.getChildren().add(mastervbox);\r\n                        \r\n                        stage.setTitle(\"No. \" + Integer.toString(i+1));\r\n                        stage.setScene(scene); \r\n                        stage.sizeToScene();\r\n                        stage.setResizable(false);\r\n                        stages.add(stage);\r\n                        stages.get(i).show();\r\n                    }\r\n                    //sorts the stages for user to view\r\n                    r = new Sort(stages);\r\n                    new Thread(r).start();\r\n                }\r\n                else\r\n                {\r\n                    //error for orders already open\r\n                    if(err != null)\r\n                        err.stage.close();\r\n                    err = new ErrorBox(\"Orders already open!\");\r\n                }\r\n            else\r\n            {\r\n                //error for ordes non existeint\r\n                if(err != null)\r\n                        err.stage.close();\r\n                err = new ErrorBox(\"There arent any orders!\");\r\n            }\r\n        }\r\n        \r\n        public void updateOrders()\r\n        {\r\n            //copy code from printOrders() to last element of orders array\r\n            double currentPrice = 0;\r\n                    \r\n            Stage stage = new Stage();\r\n            \r\n            stage.setOnCloseRequest((ae) -> {\r\n                Platform.runLater(new Runnable() {\r\n                    @Override public void run() {\r\n                        closeStages();\r\n                    }\r\n                });\r\n            });\r\n            \r\n            VBox rows = new VBox();\r\n            VBox mastervbox = new VBox();\r\n            HBox notscreen = new HBox();\r\n            \r\n            Image seatOpen = new Image(\"seatOpen.png\");\r\n            Image seatTaken = new Image(\"seatTaken.png\");\r\n            \r\n            ImageView bigScreen = new ImageView(new Image(\"bigScreen.png\"));\r\n            bigScreen.setFitWidth(200);\r\n            bigScreen.setFitHeight(33);\r\n            bigScreen.setSmooth(true);\r\n            \r\n            Group root = new Group();\r\n            Scene scene = new Scene(root);\r\n            \r\n            for(int a = 0; a < orders.get(orders.size()-1).length; a++)\r\n            {\r\n                HBox box = new HBox();\r\n                for(int b = 0; b < orders.get(orders.size()-1)[0].length; b++)\r\n                { \r\n                    //copy paste modify\r\n                    if(orders.get(orders.size()-1)[a][b].getOpen())\r\n                        orders.get(orders.size()-1)[a][b].setImage(seatOpen);\r\n                    else\r\n                    {\r\n                        orders.get(orders.size()-1)[a][b].setImage(seatTaken);\r\n                        currentPrice += orders.get(orders.size()-1)[a][b].getPrice();\r\n                    }\r\n                    orders.get(orders.size()-1)[a][b].setFitWidth(25);\r\n                    orders.get(orders.size()-1)[a][b].setPreserveRatio(true);\r\n                    orders.get(orders.size()-1)[a][b].setSmooth(true);\r\n                    orders.get(orders.size()-1)[a][b].setCache(true);\r\n                    \r\n                    //set up layout and window\r\n                    box.getChildren().add(orders.get(orders.size()-1)[a][b]);\r\n                }\r\n                //add hbox to vbox\r\n                rows.getChildren().add(box);\r\n            }\r\n            \r\n            String x = \"$ \" + Double.toString(Math.round(currentPrice*100.0)/100.0);\r\n            if(x.substring(x.indexOf('.')).length() == 2)\r\n                    x += \"0\";\r\n            Label price = new Label(x);\r\n            \r\n            //add screen to the rest\r\n            mastervbox.getChildren().add(price);\r\n            mastervbox.getChildren().add(bigScreen);\r\n            mastervbox.getChildren().add(rows);\r\n            \r\n            //add vbox to root\r\n            root.getChildren().add(mastervbox);\r\n            \r\n            //your average stage setup\r\n            stage.setTitle(\"No. \" + Integer.toString(orders.size()));\r\n            stage.setScene(scene); \r\n            stage.sizeToScene(); \r\n            stages.add(stage);\r\n            stages.get(orders.size()-1).show();\r\n            \r\n            //redisplays the orders in a nice way\r\n            Runnable r = new Sort(stages);\r\n            new Thread(r).start();\r\n        }\r\n        \r\n        public Seat[][] getCurrentSeats()\r\n        {\r\n            //new array and initilize it\r\n            Seat[][] out = new Seat[10][8];\r\n            for(int a = 0; a < out.length; a++)\r\n            {\r\n                for(int b = 0; b < out[0].length; b++)\r\n                {\r\n                    if(a<=4)\r\n                        out[a][b] = new Seat(14.99);\r\n                    else if(a>4 && a<=7)\r\n                        out[a][b] = new Seat(10.49);\r\n                    else\r\n                        out[a][b] = new Seat(6.99);\r\n                }\r\n            }\r\n            \r\n            //checks for non-locked but taken seats\r\n            //then locks correspoding seats on the new array\r\n            for(int a = 0; a < out.length; a++)\r\n                for(int b = 0; b < out[0].length; b++)\r\n                    if(!seats[a][b].getLocked() && !seats[a][b].getOpen())\r\n                        out[a][b].lock();\r\n            return out;\r\n        }\r\n        \r\n        public void closeStages()\r\n        {\r\n            //finds the stage that has closed\r\n            int index = -1;\r\n            for(int i = 0; i < stages.size(); i++)\r\n            {\r\n                if(!stages.get(i).isShowing())\r\n                    index = i;\r\n            }\r\n            \r\n            //if index is available, subtract that total and close other stages\r\n            if(index != -1)\r\n            {\r\n                //remove proce\r\n                finalPrice -= getPrice(orders.get(index));\r\n                String x = \"$ \" + Double.toString(Math.round(finalPrice*100.0)/100.0);\r\n                if(x.substring(x.indexOf('.')).length() == 2)\r\n                    x += \"0\";\r\n                priceFinal.setText(x);\r\n                \r\n                //clears the seats from the main array\r\n                for(int a = 0; a < seats.length; a++)\r\n                {\r\n                    for(int b = 0; b < seats[0].length; b++)\r\n                    {\r\n                        if(!orders.get(index)[a][b].getOpen() && !seats[a][b].getOpen())\r\n                            seats[a][b] = new Seat(seats[a][b].getPrice());\r\n                    }\r\n                }\r\n                \r\n                //removes it from the list\r\n                orders.remove(index);\r\n                stages.remove(index);\r\n                \r\n                //resorts the stages\r\n                Runnable r = new Sort(stages);\r\n                new Thread(r).start();\r\n                \r\n                //close everything if the last order was closed\r\n                if(stages.size() == 0)\r\n                {\r\n                    stageX.close();\r\n                    ordersOpen = false;\r\n                    r = new SinMove(mainStage,originX,originY);\r\n                    new Thread(r).start();\r\n                }\r\n            }\r\n            //if none have closed(-1) close all other stages\r\n            else\r\n            {\r\n                for(int i = 0; i < stages.size(); i++)\r\n                {\r\n                    stages.get(i).close();\r\n                }\r\n                stages.clear();\r\n                stageX.close();\r\n                //no ordersOpen = false; because its onCloseRequest for stageX\r\n            }\r\n        }\r\n        \r\n        //returns price of array of seats\r\n        public double getPrice(Seat[][] seats)\r\n        {\r\n            double rtrn = 0;\r\n            for(int a = 0; a < seats.length; a++)\r\n            {\r\n                for(int b = 0; b < seats[0].length; b++)\r\n                {\r\n                    if(!seats[a][b].getOpen())\r\n                        rtrn += seats[a][b].getPrice();\r\n                }\r\n            }\r\n            return rtrn;\r\n        }\r\n        \r\n        public class Sort implements Runnable \r\n        {\r\n            ArrayList<Stage> stages;\r\n            double[] coordEdit;\r\n            double length = 100;\r\n            \r\n            public Sort(ArrayList<Stage> stages) \r\n            {\r\n                this.stages = stages;\r\n            }\r\n        \r\n            public void run() \r\n            {\r\n                coordEdit = new double[2];\r\n                //sets length of the windows baised on how many there are\r\n                length += (stages.size()*(10.0/(stages.size()/2.0)));\r\n                for(int i = 0; i < stages.size(); i++)\r\n                {\r\n                    //sets each stage position, to evenly spread them out\r\n                    coordEdit[0] = originX + (((length*stages.size())/stages.size())*(i+1)) - (length/2)*stages.size() - 20;\r\n                    coordEdit[1] = originY;\r\n                    \r\n                    //activiate\r\n                    Runnable r = new SinMove(stages.get(i),coordEdit[0],coordEdit[1]);\r\n                    new Thread(r).start();\r\n                }\r\n            }\r\n        }\r\n        \r\n        public class SinMove implements Runnable\r\n        {\r\n            Stage stage;\r\n            public double dx; //destination x\r\n            public double dy; //destination y\r\n            double cx; //current x\r\n            double cy; //current y\r\n            double x; //temp value\r\n            double y; //temp value\r\n            \r\n            public SinMove(Stage stage, double dx, double dy)\r\n            {\r\n                this.stage = stage;\r\n                this.dx = dx;\r\n                this.dy = dy;\r\n                cx = stage.getX();\r\n                cy = stage.getY();\r\n            }\r\n            \r\n            public void run()\r\n            {\r\n                do\r\n                {\r\n                    //value window will move by each tick\r\n                    x = (x*.4)+((dx-cx)*.1);\r\n                    y = (y*.4)+((dy-cy)*.1);\r\n                    \r\n                    //moves window\r\n                    stage.setX(stage.getX()+x);\r\n                    stage.setY(stage.getY()+y);\r\n                    \r\n                    //gets new position\r\n                    cx = stage.getX();\r\n                    cy = stage.getY();\r\n                    \r\n                    //tick 1000/20 times per second\r\n                    try{Thread.sleep(20);}catch(Exception e){}\r\n                }while((x>.1 || x<-.1) || (y>.1 || y<-.1));\r\n            }\r\n        }\r\n    }\r\n            `}</pre>);\r\n            case 'js': return (<pre>{``}</pre>);\r\n            case 'php': return (<pre>{``}</pre>);\r\n            case 'sql': return (<pre>{``}</pre>);\r\n        }\r\n    };\r\n}\r\n\r\nexport default Snippet;","import React from 'react';\r\nimport Snippet from './code_snippets.jsx';\r\nimport java_desktop from '../bin/java_desktop.png';\r\n\r\nclass Java extends React.Component {\r\n    render(){\r\n        return <div className=\"page\">\r\n            <p>\r\n                When developing in Java, I most commonly use BlueJ. \r\n                It was introduced to me during my sophmore year of highschool, and it's my go-to for developing anything in Java.\r\n                I love it because it is lightweight, portable, and super easy to use.\r\n            </p>\r\n            <p>\r\n                My favorite project was a somewhat failed attempt at over-engineering a custom built music player.\r\n                The end result met the project requirements, but I later edited it to see what would happen if I played every single sound in a couple of my favorite games,\r\n                all at once.\r\n            </p>\r\n            <i style={{margin: \"10px\"}}>(Volume Warning: It's quite loud and truly terrifying.)</i><br/>\r\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/b2_xi8xjNyY\" title=\"TerrariaPlaylistVideo\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullscreen></iframe>\r\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6dPNpdMZPKY\" title=\"MinecraftPlaylistvideo\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullscreen></iframe>\r\n            <p>\r\n                My largest project to date, however, is a movie theater project in whitch was meant to show my competence in the use of arrays and lists.\r\n                However, I decided a console interface was quite boring, and dove into JavaFX and multi-threading. \r\n                The best part was that using a custom user interface meant I didn't have to worry about validating user inputs.\r\n            </p>\r\n            <i style={{margin: \"10px\"}}>Here is the result diplayed on my current desktop (an infrared photo of the center of the universe from NASA's spitzer space telescope).</i><br/>\r\n            <img src={java_desktop} alt='' width=\"80%\"></img>\r\n            <p>\r\n                Without further adue, the code:\r\n            </p>\r\n            <Snippet type='java'/>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Java;","import React from 'react';\r\n\r\nclass Javascript extends React.Component {\r\n    render(){\r\n        return <div className=\"page\">\r\n            js\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Javascript;","import React from 'react';\r\n\r\nclass PHP extends React.Component {\r\n    render(){\r\n        return <div className=\"page\">\r\n            php\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default PHP;","import React from 'react';\r\n\r\nclass SQL extends React.Component {\r\n    render(){\r\n        return <div className=\"page\">\r\n            sql\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default SQL;","import React from 'react';\nimport Header from './components/header.jsx';\nimport Home from './components/home.jsx';\nimport Java from './components/java.jsx';\nimport Javascript from './components/javascript.jsx';\nimport PHP from './components/php.jsx';\nimport SQL from './components/sql.jsx';\nimport './styles/app.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageLoaded: 0\n    }\n  }\n\n  headerHandler = (value) => {\n    this.setState({pageLoaded: value});\n  }\n\n  renderPage() {\n    switch (this.state.pageLoaded) {\n      default: return <Home/>;\n      case 0: return <Home/>;\n      case 1: return <Java/>;\n      case 2: return <Javascript/>;\n      case 3: return <PHP/>;\n      case 4: return <SQL/>;\n    }\n  }\n\n  render() {\n    return <div>\n      <Header page={this.state.pageLoaded} headerHandler={this.headerHandler}/>\n      {this.renderPage()}\n    </div>\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}